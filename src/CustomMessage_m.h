//
// Generated file, do not edit! Created by nedtool 5.6 from CustomMessage.msg.
//

#ifndef __CUSTOMMESSAGE_M_H
#define __CUSTOMMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <string>
#include <vector>
#include <bitset>
// }}

/**
 * Class generated from <tt>CustomMessage.msg:19</tt> by nedtool.
 * <pre>
 * packet CustomMessage
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int dataSequence; // Header: data sequence number
 *     string payload; // No maximum size
 *     char parity; // 1-byte checksum
 *     char frameType; // Data=2,ACK=1,NACK=0
 *     int ackSequence; // ACK/NACK sequence number
 * }
 * </pre>
 *
 * CustomMessage_Base is only useful if it gets subclassed, and CustomMessage is derived from it.
 * The minimum code to be written for CustomMessage is the following:
 *
 * <pre>
 * class CustomMessage : public CustomMessage_Base
 * {
 *   private:
 *     void copy(const CustomMessage& other) { ... }

 *   public:
 *     CustomMessage(const char *name=nullptr, short kind=0) : CustomMessage_Base(name,kind) {}
 *     CustomMessage(const CustomMessage& other) : CustomMessage_Base(other) {copy(other);}
 *     CustomMessage& operator=(const CustomMessage& other) {if (this==&other) return *this; CustomMessage_Base::operator=(other); copy(other); return *this;}
 *     virtual CustomMessage *dup() const override {return new CustomMessage(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from CustomMessage_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(CustomMessage)
 * </pre>
 */

#define NACK_FRAME 0
#define ACK_FRAME 1
#define DATA_FRAME 2
#define COORDINATOR_FRAME 3

class CustomMessage_Base : public ::omnetpp::cPacket
{
  protected:
    int dataSequence;
    std::vector<std::bitset<8>> payload;
    std::bitset<8> parity;
    int frameType;
    int ackSequence;

  private:
    void copy(const CustomMessage_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CustomMessage_Base&);
    CustomMessage_Base(const CustomMessage_Base& other);
    // make assignment operator protected to force the user override it
    CustomMessage_Base& operator=(const CustomMessage_Base& other);

  public:
    // make constructors protected to avoid instantiation
    CustomMessage_Base(const char *name=nullptr, short kind=0);
    virtual ~CustomMessage_Base();
    virtual CustomMessage_Base *dup() const override {
        return new CustomMessage_Base(*this);
    }
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getDataSequence() const;
    virtual void setDataSequence(int dataSequence);
    virtual const std::vector<std::bitset<8>>* getPayload() const;
    virtual void setPayload(std::vector<std::bitset<8>>const &payload);
    virtual std::bitset<8> getParity() const;
    virtual void setParity(std::bitset<8> parity);
    virtual int getFrameType() const;
    virtual void setFrameType(int frameType);
    virtual int getAckSequence() const;
    virtual void setAckSequence(int ackSequence);
};


#endif // ifndef __CUSTOMMESSAGE_M_H

